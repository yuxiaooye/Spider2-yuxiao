{
    "table_name": "patent_claims_fulltext",
    "table_fullname": "bigquery-public-data.uspto_oce_claims.patent_claims_fulltext",
    "column_names": [
        "pat_no",
        "claim_no",
        "claim_txt",
        "dependencies",
        "ind_flg",
        "appl_id"
    ],
    "column_types": [
        "STRING",
        "STRING",
        "STRING",
        "STRING",
        "STRING",
        "STRING"
    ],
    "nested_column_names": [
        "pat_no",
        "claim_no",
        "claim_txt",
        "dependencies",
        "ind_flg",
        "appl_id"
    ],
    "nested_column_types": [
        "STRING",
        "STRING",
        "STRING",
        "STRING",
        "STRING",
        "STRING"
    ],
    "description": [
        null,
        null,
        null,
        null,
        null,
        null
    ],
    "sample_rows": [
        {
            "pat_no": "6272560",
            "claim_no": "4",
            "claim_txt": "4. The method recited in claim 1, further comprising performing the following additional steps prior to step (c):issuing an operation to said peripheral memory device to obtain an indication of a block size and a total number of blocks of said peripheral memory device;calculating from said obtained block size and said obtained total number of blocks a maximum physical capacity of said peripheral memory device;comparing the indication of the formatted capacity of said peripheral memory device obtained in step (b) to the calculated maximum physical capacity of said peripheral memory device; andcontinuing to step (c) only if the formatted capacity is not greater than the calculated maximum physical capacity of said peripheral memory device.",
            "dependencies": "1",
            "ind_flg": "0",
            "appl_id": "09170341"
        },
        {
            "pat_no": "6272560",
            "claim_no": "9",
            "claim_txt": "9. The apparatus recited in claim 7, further comprising:means for issuing an operation to said peripheral memory device to obtain an indication of a block size of said peripheral memory device; andmeans for determining whether said operating system supports peripheral memory devices having the obtained block size.",
            "dependencies": "7",
            "ind_flg": "0",
            "appl_id": "09170341"
        },
        {
            "pat_no": "6272560",
            "claim_no": "5",
            "claim_txt": "5. The method recited in claim 4, further comprising, prior to step (c), determining whether said operating system supports peripheral memory devices having the obtained block size, and continuing to step (c) only if the obtained block size is supported.",
            "dependencies": "4",
            "ind_flg": "0",
            "appl_id": "09170341"
        },
        {
            "pat_no": "6272560",
            "claim_no": "6",
            "claim_txt": "6. The method recited in claim 4, wherein the entry created in said step (d) comprises at least one of the formatted capacity, the block size, the total number of blocks, and the maximum physical capacity of the peripheral memory device.",
            "dependencies": "4",
            "ind_flg": "0",
            "appl_id": "09170341"
        },
        {
            "pat_no": "6272561",
            "claim_no": "1",
            "claim_txt": "'1. The Auto-Detection method of sound blaster interface card, which enabling a computer system to automatically detect the indexes required for a sound blaster interface card being connected with said computer in a normal operation circumstance, comprising the steps of:(1) selecting a possible connection port for said sound blaster interface card, presuming said port selected is the correct one, delivering a Reset signal to said card, checking if an ''Acknowledgement'' being sent back from said card, and identifying said port selected as the correct port when said ''Acknowledgement'' being received;(2) selecting a possible Direct Memory Access (DMA) channel and presuming said channel selected is the correct one when the correct connection port being detected, then selecting a possible Interrupt Request (IRQ) and presuming said Interrupt Request (IRQ) selected is the correct one, delivering a play instruction to said card and checking if an Interruption being sent back from said card, and identifying the detection of said card being successfully completed when receiving an Interruption;(3) otherwise, selecting the next possible Direct Memory Access (DMA) Channel and presuming said channel is the correct one, then again selecting a possible Interrupt Request (IRQ) and presuming said Interrupt Request selected is correct, delivering a play instruction to said card and checking if an Interruption being sent back from said card, and identifying the detection of said card being successfully completed when receiving an Interruption.'",
            "dependencies": null,
            "ind_flg": "1",
            "appl_id": "09225308"
        }
    ]
}